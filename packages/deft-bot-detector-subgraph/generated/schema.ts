// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get fnName(): string {
    let value = this.get("fnName");
    return value.toString();
  }

  set fnName(value: string) {
    this.set("fnName", Value.fromString(value));
  }

  get slippage(): BigDecimal {
    let value = this.get("slippage");
    return value.toBigDecimal();
  }

  set slippage(value: BigDecimal) {
    this.set("slippage", Value.fromBigDecimal(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get isBot(): boolean {
    let value = this.get("isBot");
    return value.toBoolean();
  }

  set isBot(value: boolean) {
    this.set("isBot", Value.fromBoolean(value));
  }

  get isSlippageBot(): boolean {
    let value = this.get("isSlippageBot");
    return value.toBoolean();
  }

  set isSlippageBot(value: boolean) {
    this.set("isSlippageBot", Value.fromBoolean(value));
  }

  get isDeadlineBot(): boolean {
    let value = this.get("isDeadlineBot");
    return value.toBoolean();
  }

  set isDeadlineBot(value: boolean) {
    this.set("isDeadlineBot", Value.fromBoolean(value));
  }

  get transactionAmountInMax(): BigInt | null {
    let value = this.get("transactionAmountInMax");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set transactionAmountInMax(value: BigInt | null) {
    if (value === null) {
      this.unset("transactionAmountInMax");
    } else {
      this.set("transactionAmountInMax", Value.fromBigInt(value as BigInt));
    }
  }

  get swapAmountIn(): BigInt | null {
    let value = this.get("swapAmountIn");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapAmountIn(value: BigInt | null) {
    if (value === null) {
      this.unset("swapAmountIn");
    } else {
      this.set("swapAmountIn", Value.fromBigInt(value as BigInt));
    }
  }

  get transactionAmountOutMin(): BigInt | null {
    let value = this.get("transactionAmountOutMin");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set transactionAmountOutMin(value: BigInt | null) {
    if (value === null) {
      this.unset("transactionAmountOutMin");
    } else {
      this.set("transactionAmountOutMin", Value.fromBigInt(value as BigInt));
    }
  }

  get swapAmountOut(): BigInt | null {
    let value = this.get("swapAmountOut");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapAmountOut(value: BigInt | null) {
    if (value === null) {
      this.unset("swapAmountOut");
    } else {
      this.set("swapAmountOut", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Recipient extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Recipient entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Recipient entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Recipient", id.toString(), this);
  }

  static load(id: string): Recipient | null {
    return store.get("Recipient", id) as Recipient | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isNewHolder(): boolean {
    let value = this.get("isNewHolder");
    return value.toBoolean();
  }

  set isNewHolder(value: boolean) {
    this.set("isNewHolder", Value.fromBoolean(value));
  }

  get firstTx(): string | null {
    let value = this.get("firstTx");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set firstTx(value: string | null) {
    if (value === null) {
      this.unset("firstTx");
    } else {
      this.set("firstTx", Value.fromString(value as string));
    }
  }

  get lastTx(): string | null {
    let value = this.get("lastTx");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastTx(value: string | null) {
    if (value === null) {
      this.unset("lastTx");
    } else {
      this.set("lastTx", Value.fromString(value as string));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get recipients(): Array<string> {
    let value = this.get("recipients");
    return value.toStringArray();
  }

  set recipients(value: Array<string>) {
    this.set("recipients", Value.fromStringArray(value));
  }

  get isDeadlineBot(): boolean {
    let value = this.get("isDeadlineBot");
    return value.toBoolean();
  }

  set isDeadlineBot(value: boolean) {
    this.set("isDeadlineBot", Value.fromBoolean(value));
  }

  get fnName(): string {
    let value = this.get("fnName");
    return value.toString();
  }

  set fnName(value: string) {
    this.set("fnName", Value.fromString(value));
  }

  get amountInMax(): BigInt {
    let value = this.get("amountInMax");
    return value.toBigInt();
  }

  set amountInMax(value: BigInt) {
    this.set("amountInMax", Value.fromBigInt(value));
  }

  get amountOutMin(): BigInt {
    let value = this.get("amountOutMin");
    return value.toBigInt();
  }

  set amountOutMin(value: BigInt) {
    this.set("amountOutMin", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Global extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Global entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Global entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Global", id.toString(), this);
  }

  static load(id: string): Global | null {
    return store.get("Global", id) as Global | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get botsDetected(): BigInt {
    let value = this.get("botsDetected");
    return value.toBigInt();
  }

  set botsDetected(value: BigInt) {
    this.set("botsDetected", Value.fromBigInt(value));
  }
}
