// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovedTransaction extends ethereum.Event {
  get params(): ApprovedTransaction__Params {
    return new ApprovedTransaction__Params(this);
  }
}

export class ApprovedTransaction__Params {
  _event: ApprovedTransaction;

  constructor(event: ApprovedTransaction) {
    this._event = event;
  }

  get transactionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class BulkApprovedTransactions extends ethereum.Event {
  get params(): BulkApprovedTransactions__Params {
    return new BulkApprovedTransactions__Params(this);
  }
}

export class BulkApprovedTransactions__Params {
  _event: BulkApprovedTransactions;

  constructor(event: BulkApprovedTransactions) {
    this._event = event;
  }

  get transactionHashes(): Array<Bytes> {
    return this._event.parameters[0].value.toBytesArray();
  }
}

export class ProofOfBurn extends ethereum.Event {
  get params(): ProofOfBurn__Params {
    return new ProofOfBurn__Params(this);
  }
}

export class ProofOfBurn__Params {
  _event: ProofOfBurn;

  constructor(event: ProofOfBurn) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get currentNonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sourceChain(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get destinationChain(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get transactionHash(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class ProofOfMint extends ethereum.Event {
  get params(): ProofOfMint__Params {
    return new ProofOfMint__Params(this);
  }
}

export class ProofOfMint__Params {
  _event: ProofOfMint;

  constructor(event: ProofOfMint) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountAsFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get finalAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get transactionHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MintableBurnableToken extends ethereum.SmartContract {
  static bind(address: Address): MintableBurnableToken {
    return new MintableBurnableToken("MintableBurnableToken", address);
  }

  adminAddress(): Address {
    let result = super.call("adminAddress", "adminAddress():(address)", []);

    return result[0].toAddress();
  }

  try_adminAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("adminAddress", "adminAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentNonce(): BigInt {
    let result = super.call("currentNonce", "currentNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentNonce", "currentNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minAmountToBurn(): BigInt {
    let result = super.call(
      "minAmountToBurn",
      "minAmountToBurn():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minAmountToBurn(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minAmountToBurn",
      "minAmountToBurn():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transactionStorage(param0: Bytes): i32 {
    let result = super.call(
      "transactionStorage",
      "transactionStorage(bytes32):(uint8)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toI32();
  }

  try_transactionStorage(param0: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "transactionStorage",
      "transactionStorage(bytes32):(uint8)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BulkMarkTransactionsAsApprovedCall extends ethereum.Call {
  get inputs(): BulkMarkTransactionsAsApprovedCall__Inputs {
    return new BulkMarkTransactionsAsApprovedCall__Inputs(this);
  }

  get outputs(): BulkMarkTransactionsAsApprovedCall__Outputs {
    return new BulkMarkTransactionsAsApprovedCall__Outputs(this);
  }
}

export class BulkMarkTransactionsAsApprovedCall__Inputs {
  _call: BulkMarkTransactionsAsApprovedCall;

  constructor(call: BulkMarkTransactionsAsApprovedCall) {
    this._call = call;
  }

  get transactionHashes(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class BulkMarkTransactionsAsApprovedCall__Outputs {
  _call: BulkMarkTransactionsAsApprovedCall;

  constructor(call: BulkMarkTransactionsAsApprovedCall) {
    this._call = call;
  }
}

export class BurnAndCreateProofCall extends ethereum.Call {
  get inputs(): BurnAndCreateProofCall__Inputs {
    return new BurnAndCreateProofCall__Inputs(this);
  }

  get outputs(): BurnAndCreateProofCall__Outputs {
    return new BurnAndCreateProofCall__Outputs(this);
  }
}

export class BurnAndCreateProofCall__Inputs {
  _call: BurnAndCreateProofCall;

  constructor(call: BurnAndCreateProofCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get destinationChain(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnAndCreateProofCall__Outputs {
  _call: BurnAndCreateProofCall;

  constructor(call: BurnAndCreateProofCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MarkTransactionAsApprovedCall extends ethereum.Call {
  get inputs(): MarkTransactionAsApprovedCall__Inputs {
    return new MarkTransactionAsApprovedCall__Inputs(this);
  }

  get outputs(): MarkTransactionAsApprovedCall__Outputs {
    return new MarkTransactionAsApprovedCall__Outputs(this);
  }
}

export class MarkTransactionAsApprovedCall__Inputs {
  _call: MarkTransactionAsApprovedCall;

  constructor(call: MarkTransactionAsApprovedCall) {
    this._call = call;
  }

  get transactionHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class MarkTransactionAsApprovedCall__Outputs {
  _call: MarkTransactionAsApprovedCall;

  constructor(call: MarkTransactionAsApprovedCall) {
    this._call = call;
  }
}

export class MintWithBurnProofCall extends ethereum.Call {
  get inputs(): MintWithBurnProofCall__Inputs {
    return new MintWithBurnProofCall__Inputs(this);
  }

  get outputs(): MintWithBurnProofCall__Outputs {
    return new MintWithBurnProofCall__Outputs(this);
  }
}

export class MintWithBurnProofCall__Inputs {
  _call: MintWithBurnProofCall;

  constructor(call: MintWithBurnProofCall) {
    this._call = call;
  }

  get sourceBurnProof(): MintWithBurnProofCallSourceBurnProofStruct {
    return this._call.inputValues[0].value.toTuple() as MintWithBurnProofCallSourceBurnProofStruct;
  }
}

export class MintWithBurnProofCall__Outputs {
  _call: MintWithBurnProofCall;

  constructor(call: MintWithBurnProofCall) {
    this._call = call;
  }
}

export class MintWithBurnProofCallSourceBurnProofStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get sourceChainId(): BigInt {
    return this[1].toBigInt();
  }

  get sourceNonce(): BigInt {
    return this[2].toBigInt();
  }

  get transactionHash(): Bytes {
    return this[3].toBytes();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateSettingsCall extends ethereum.Call {
  get inputs(): UpdateSettingsCall__Inputs {
    return new UpdateSettingsCall__Inputs(this);
  }

  get outputs(): UpdateSettingsCall__Outputs {
    return new UpdateSettingsCall__Outputs(this);
  }
}

export class UpdateSettingsCall__Inputs {
  _call: UpdateSettingsCall;

  constructor(call: UpdateSettingsCall) {
    this._call = call;
  }

  get newFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMinAmountToBurn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateSettingsCall__Outputs {
  _call: UpdateSettingsCall;

  constructor(call: UpdateSettingsCall) {
    this._call = call;
  }
}
