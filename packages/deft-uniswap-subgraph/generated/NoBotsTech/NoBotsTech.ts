// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BotTransactionDetected extends ethereum.Event {
  get params(): BotTransactionDetected__Params {
    return new BotTransactionDetected__Params(this);
  }
}

export class BotTransactionDetected__Params {
  _event: BotTransactionDetected;

  constructor(event: BotTransactionDetected) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get transferAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get taxedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MultiplierUpdated extends ethereum.Event {
  get params(): MultiplierUpdated__Params {
    return new MultiplierUpdated__Params(this);
  }
}

export class MultiplierUpdated__Params {
  _event: MultiplierUpdated;

  constructor(event: MultiplierUpdated) {
    this._event = event;
  }

  get newMultiplier(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ReferralRegistered extends ethereum.Event {
  get params(): ReferralRegistered__Params {
    return new ReferralRegistered__Params(this);
  }
}

export class ReferralRegistered__Params {
  _event: ReferralRegistered;

  constructor(event: ReferralRegistered) {
    this._event = event;
  }

  get referral(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get referrer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReferrerReplaced extends ethereum.Event {
  get params(): ReferrerReplaced__Params {
    return new ReferrerReplaced__Params(this);
  }
}

export class ReferrerReplaced__Params {
  _event: ReferrerReplaced;

  constructor(event: ReferrerReplaced) {
    this._event = event;
  }

  get referral(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get referrerFrom(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get referrerTo(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ReferrerRewardUpdated extends ethereum.Event {
  get params(): ReferrerRewardUpdated__Params {
    return new ReferrerRewardUpdated__Params(this);
  }
}

export class ReferrerRewardUpdated__Params {
  _event: ReferrerRewardUpdated;

  constructor(event: ReferrerRewardUpdated) {
    this._event = event;
  }

  get referrer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NoBotsTech__prepareTaxAmountsResultTaxAmountsOutputStruct extends ethereum.Tuple {
  get senderBalance(): BigInt {
    return this[0].toBigInt();
  }

  get recipientBalance(): BigInt {
    return this[1].toBigInt();
  }

  get burnAndRewardAmount(): BigInt {
    return this[2].toBigInt();
  }

  get recipientGetsAmount(): BigInt {
    return this[3].toBigInt();
  }
}

export class NoBotsTech__prepareTaxAmountsInputTaxAmountsInputStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get transferAmount(): BigInt {
    return this[2].toBigInt();
  }

  get senderBalance(): BigInt {
    return this[3].toBigInt();
  }

  get recipientBalance(): BigInt {
    return this[4].toBigInt();
  }
}

export class NoBotsTech__getTemporaryReferralRealAmountsBulkResultValue0Struct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get realBalance(): BigInt {
    return this[1].toBigInt();
  }
}

export class NoBotsTech extends ethereum.SmartContract {
  static bind(address: Address): NoBotsTech {
    return new NoBotsTech("NoBotsTech", address);
  }

  chargeCustomTax(taxAmount: BigInt, accountBalance: BigInt): BigInt {
    let result = super.call(
      "chargeCustomTax",
      "chargeCustomTax(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(taxAmount),
        ethereum.Value.fromUnsignedBigInt(accountBalance)
      ]
    );

    return result[0].toBigInt();
  }

  try_chargeCustomTax(
    taxAmount: BigInt,
    accountBalance: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "chargeCustomTax",
      "chargeCustomTax(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(taxAmount),
        ethereum.Value.fromUnsignedBigInt(accountBalance)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prepareHumanAddressMintOrBurnRewardsAmounts(
    isMint: boolean,
    account: Address,
    desiredAmountToMintOrBurn: BigInt
  ): BigInt {
    let result = super.call(
      "prepareHumanAddressMintOrBurnRewardsAmounts",
      "prepareHumanAddressMintOrBurnRewardsAmounts(bool,address,uint256):(uint256)",
      [
        ethereum.Value.fromBoolean(isMint),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(desiredAmountToMintOrBurn)
      ]
    );

    return result[0].toBigInt();
  }

  try_prepareHumanAddressMintOrBurnRewardsAmounts(
    isMint: boolean,
    account: Address,
    desiredAmountToMintOrBurn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prepareHumanAddressMintOrBurnRewardsAmounts",
      "prepareHumanAddressMintOrBurnRewardsAmounts(bool,address,uint256):(uint256)",
      [
        ethereum.Value.fromBoolean(isMint),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(desiredAmountToMintOrBurn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prepareTaxAmounts(
    taxAmountsInput: NoBotsTech__prepareTaxAmountsInputTaxAmountsInputStruct
  ): NoBotsTech__prepareTaxAmountsResultTaxAmountsOutputStruct {
    let result = super.call(
      "prepareTaxAmounts",
      "prepareTaxAmounts((address,address,uint256,uint256,uint256)):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromTuple(taxAmountsInput)]
    );

    return result[0].toTuple() as NoBotsTech__prepareTaxAmountsResultTaxAmountsOutputStruct;
  }

  try_prepareTaxAmounts(
    taxAmountsInput: NoBotsTech__prepareTaxAmountsInputTaxAmountsInputStruct
  ): ethereum.CallResult<
    NoBotsTech__prepareTaxAmountsResultTaxAmountsOutputStruct
  > {
    let result = super.tryCall(
      "prepareTaxAmounts",
      "prepareTaxAmounts((address,address,uint256,uint256,uint256)):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromTuple(taxAmountsInput)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as NoBotsTech__prepareTaxAmountsResultTaxAmountsOutputStruct
    );
  }

  batchBurnAndReward(): BigInt {
    let result = super.call(
      "batchBurnAndReward",
      "batchBurnAndReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_batchBurnAndReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "batchBurnAndReward",
      "batchBurnAndReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  botTaxPercent(): BigInt {
    let result = super.call("botTaxPercent", "botTaxPercent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_botTaxPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "botTaxPercent",
      "botTaxPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cachedMultiplier(): BigInt {
    let result = super.call(
      "cachedMultiplier",
      "cachedMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_cachedMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cachedMultiplier",
      "cachedMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  customTaxPercents(param0: Address): BigInt {
    let result = super.call(
      "customTaxPercents",
      "customTaxPercents(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_customTaxPercents(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "customTaxPercents",
      "customTaxPercents(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  filterNonZeroReferrals(referrals: Array<Address>): Array<Address> {
    let result = super.call(
      "filterNonZeroReferrals",
      "filterNonZeroReferrals(address[]):(address[])",
      [ethereum.Value.fromAddressArray(referrals)]
    );

    return result[0].toAddressArray();
  }

  try_filterNonZeroReferrals(
    referrals: Array<Address>
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "filterNonZeroReferrals",
      "filterNonZeroReferrals(address[]):(address[])",
      [ethereum.Value.fromAddressArray(referrals)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  firstLevelRefPercent(): BigInt {
    let result = super.call(
      "firstLevelRefPercent",
      "firstLevelRefPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_firstLevelRefPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstLevelRefPercent",
      "firstLevelRefPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalance(account: Address, accountBalance: BigInt): BigInt {
    let result = super.call(
      "getBalance",
      "getBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(accountBalance)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBalance(
    account: Address,
    accountBalance: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBalance",
      "getBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(accountBalance)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCachedReferrerRewards(referrer: Address): BigInt {
    let result = super.call(
      "getCachedReferrerRewards",
      "getCachedReferrerRewards(address):(uint256)",
      [ethereum.Value.fromAddress(referrer)]
    );

    return result[0].toBigInt();
  }

  try_getCachedReferrerRewards(referrer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCachedReferrerRewards",
      "getCachedReferrerRewards(address):(uint256)",
      [ethereum.Value.fromAddress(referrer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCalculatedReferrerRewards(
    referrer: Address,
    referrals: Array<Address>
  ): BigInt {
    let result = super.call(
      "getCalculatedReferrerRewards",
      "getCalculatedReferrerRewards(address,address[]):(uint256)",
      [
        ethereum.Value.fromAddress(referrer),
        ethereum.Value.fromAddressArray(referrals)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCalculatedReferrerRewards(
    referrer: Address,
    referrals: Array<Address>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCalculatedReferrerRewards",
      "getCalculatedReferrerRewards(address,address[]):(uint256)",
      [
        ethereum.Value.fromAddress(referrer),
        ethereum.Value.fromAddressArray(referrals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRealBalance(account: Address, accountBalance: BigInt): BigInt {
    let result = super.call(
      "getRealBalance",
      "getRealBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(accountBalance)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRealBalance(
    account: Address,
    accountBalance: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRealBalance",
      "getRealBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(accountBalance)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRealBalanceTeamVestingContract(accountBalance: BigInt): BigInt {
    let result = super.call(
      "getRealBalanceTeamVestingContract",
      "getRealBalanceTeamVestingContract(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(accountBalance)]
    );

    return result[0].toBigInt();
  }

  try_getRealBalanceTeamVestingContract(
    accountBalance: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRealBalanceTeamVestingContract",
      "getRealBalanceTeamVestingContract(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(accountBalance)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardsBalance(): BigInt {
    let result = super.call(
      "getRewardsBalance",
      "getRewardsBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRewardsBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardsBalance",
      "getRewardsBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTemporaryReferralRealAmountsBulk(
    addrs: Array<Address>
  ): Array<NoBotsTech__getTemporaryReferralRealAmountsBulkResultValue0Struct> {
    let result = super.call(
      "getTemporaryReferralRealAmountsBulk",
      "getTemporaryReferralRealAmountsBulk(address[]):((address,uint256)[])",
      [ethereum.Value.fromAddressArray(addrs)]
    );

    return result[0].toTupleArray<
      NoBotsTech__getTemporaryReferralRealAmountsBulkResultValue0Struct
    >();
  }

  try_getTemporaryReferralRealAmountsBulk(
    addrs: Array<Address>
  ): ethereum.CallResult<
    Array<NoBotsTech__getTemporaryReferralRealAmountsBulkResultValue0Struct>
  > {
    let result = super.tryCall(
      "getTemporaryReferralRealAmountsBulk",
      "getTemporaryReferralRealAmountsBulk(address[]):((address,uint256)[])",
      [ethereum.Value.fromAddressArray(addrs)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        NoBotsTech__getTemporaryReferralRealAmountsBulkResultValue0Struct
      >()
    );
  }

  getTotalSupply(): BigInt {
    let result = super.call("getTotalSupply", "getTotalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSupply",
      "getTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  howManyBlocksAgoReceived(): BigInt {
    let result = super.call(
      "howManyBlocksAgoReceived",
      "howManyBlocksAgoReceived():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_howManyBlocksAgoReceived(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "howManyBlocksAgoReceived",
      "howManyBlocksAgoReceived():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  howManyBlocksAgoSent(): BigInt {
    let result = super.call(
      "howManyBlocksAgoSent",
      "howManyBlocksAgoSent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_howManyBlocksAgoSent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "howManyBlocksAgoSent",
      "howManyBlocksAgoSent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  humanTaxPercent(): BigInt {
    let result = super.call(
      "humanTaxPercent",
      "humanTaxPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_humanTaxPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "humanTaxPercent",
      "humanTaxPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastCachedTimestamp(): BigInt {
    let result = super.call(
      "lastCachedTimestamp",
      "lastCachedTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastCachedTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCachedTimestamp",
      "lastCachedTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  realTotalSupply(): BigInt {
    let result = super.call(
      "realTotalSupply",
      "realTotalSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_realTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "realTotalSupply",
      "realTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referralToReferrer(param0: Address): Address {
    let result = super.call(
      "referralToReferrer",
      "referralToReferrer(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_referralToReferrer(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "referralToReferrer",
      "referralToReferrer(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  referrerRealBalances(param0: Address): BigInt {
    let result = super.call(
      "referrerRealBalances",
      "referrerRealBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_referrerRealBalances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referrerRealBalances",
      "referrerRealBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refTaxPercent(): BigInt {
    let result = super.call("refTaxPercent", "refTaxPercent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_refTaxPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refTaxPercent",
      "refTaxPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsBalance(): BigInt {
    let result = super.call("rewardsBalance", "rewardsBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardsBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsBalance",
      "rewardsBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ROLE_ADMIN(): Bytes {
    let result = super.call("ROLE_ADMIN", "ROLE_ADMIN():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ROLE_ADMIN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ROLE_ADMIN", "ROLE_ADMIN():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ROLE_CUSTOM_TAX(): Bytes {
    let result = super.call(
      "ROLE_CUSTOM_TAX",
      "ROLE_CUSTOM_TAX():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ROLE_CUSTOM_TAX(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ROLE_CUSTOM_TAX",
      "ROLE_CUSTOM_TAX():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ROLE_EXCLUDE_FROM_BALANCE(): Bytes {
    let result = super.call(
      "ROLE_EXCLUDE_FROM_BALANCE",
      "ROLE_EXCLUDE_FROM_BALANCE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ROLE_EXCLUDE_FROM_BALANCE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ROLE_EXCLUDE_FROM_BALANCE",
      "ROLE_EXCLUDE_FROM_BALANCE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ROLE_PARENT(): Bytes {
    let result = super.call("ROLE_PARENT", "ROLE_PARENT():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ROLE_PARENT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ROLE_PARENT", "ROLE_PARENT():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ROLE_WHITELIST(): Bytes {
    let result = super.call("ROLE_WHITELIST", "ROLE_WHITELIST():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ROLE_WHITELIST(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ROLE_WHITELIST",
      "ROLE_WHITELIST():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  secondLevelRefPercent(): BigInt {
    let result = super.call(
      "secondLevelRefPercent",
      "secondLevelRefPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_secondLevelRefPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "secondLevelRefPercent",
      "secondLevelRefPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  secondsBetweenUpdates(): BigInt {
    let result = super.call(
      "secondsBetweenUpdates",
      "secondsBetweenUpdates():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_secondsBetweenUpdates(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "secondsBetweenUpdates",
      "secondsBetweenUpdates():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  temporaryReferralRealAmounts(param0: Address): BigInt {
    let result = super.call(
      "temporaryReferralRealAmounts",
      "temporaryReferralRealAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_temporaryReferralRealAmounts(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "temporaryReferralRealAmounts",
      "temporaryReferralRealAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChargeCustomTaxCall extends ethereum.Call {
  get inputs(): ChargeCustomTaxCall__Inputs {
    return new ChargeCustomTaxCall__Inputs(this);
  }

  get outputs(): ChargeCustomTaxCall__Outputs {
    return new ChargeCustomTaxCall__Outputs(this);
  }
}

export class ChargeCustomTaxCall__Inputs {
  _call: ChargeCustomTaxCall;

  constructor(call: ChargeCustomTaxCall) {
    this._call = call;
  }

  get taxAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get accountBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChargeCustomTaxCall__Outputs {
  _call: ChargeCustomTaxCall;

  constructor(call: ChargeCustomTaxCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClearReferrerRewardsCall extends ethereum.Call {
  get inputs(): ClearReferrerRewardsCall__Inputs {
    return new ClearReferrerRewardsCall__Inputs(this);
  }

  get outputs(): ClearReferrerRewardsCall__Outputs {
    return new ClearReferrerRewardsCall__Outputs(this);
  }
}

export class ClearReferrerRewardsCall__Inputs {
  _call: ClearReferrerRewardsCall;

  constructor(call: ClearReferrerRewardsCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClearReferrerRewardsCall__Outputs {
  _call: ClearReferrerRewardsCall;

  constructor(call: ClearReferrerRewardsCall) {
    this._call = call;
  }
}

export class FillTestReferralTemporaryBalancesCall extends ethereum.Call {
  get inputs(): FillTestReferralTemporaryBalancesCall__Inputs {
    return new FillTestReferralTemporaryBalancesCall__Inputs(this);
  }

  get outputs(): FillTestReferralTemporaryBalancesCall__Outputs {
    return new FillTestReferralTemporaryBalancesCall__Outputs(this);
  }
}

export class FillTestReferralTemporaryBalancesCall__Inputs {
  _call: FillTestReferralTemporaryBalancesCall;

  constructor(call: FillTestReferralTemporaryBalancesCall) {
    this._call = call;
  }

  get referrals(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class FillTestReferralTemporaryBalancesCall__Outputs {
  _call: FillTestReferralTemporaryBalancesCall;

  constructor(call: FillTestReferralTemporaryBalancesCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class GrantRolesBulkCall extends ethereum.Call {
  get inputs(): GrantRolesBulkCall__Inputs {
    return new GrantRolesBulkCall__Inputs(this);
  }

  get outputs(): GrantRolesBulkCall__Outputs {
    return new GrantRolesBulkCall__Outputs(this);
  }
}

export class GrantRolesBulkCall__Inputs {
  _call: GrantRolesBulkCall;

  constructor(call: GrantRolesBulkCall) {
    this._call = call;
  }

  get roles(): Array<GrantRolesBulkCallRolesStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      GrantRolesBulkCallRolesStruct
    >();
  }
}

export class GrantRolesBulkCall__Outputs {
  _call: GrantRolesBulkCall;

  constructor(call: GrantRolesBulkCall) {
    this._call = call;
  }
}

export class GrantRolesBulkCallRolesStruct extends ethereum.Tuple {
  get role(): Bytes {
    return this[0].toBytes();
  }

  get addr(): Address {
    return this[1].toAddress();
  }
}

export class PrepareHumanAddressMintOrBurnRewardsAmountsCall extends ethereum.Call {
  get inputs(): PrepareHumanAddressMintOrBurnRewardsAmountsCall__Inputs {
    return new PrepareHumanAddressMintOrBurnRewardsAmountsCall__Inputs(this);
  }

  get outputs(): PrepareHumanAddressMintOrBurnRewardsAmountsCall__Outputs {
    return new PrepareHumanAddressMintOrBurnRewardsAmountsCall__Outputs(this);
  }
}

export class PrepareHumanAddressMintOrBurnRewardsAmountsCall__Inputs {
  _call: PrepareHumanAddressMintOrBurnRewardsAmountsCall;

  constructor(call: PrepareHumanAddressMintOrBurnRewardsAmountsCall) {
    this._call = call;
  }

  get isMint(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get desiredAmountToMintOrBurn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PrepareHumanAddressMintOrBurnRewardsAmountsCall__Outputs {
  _call: PrepareHumanAddressMintOrBurnRewardsAmountsCall;

  constructor(call: PrepareHumanAddressMintOrBurnRewardsAmountsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PrepareTaxAmountsCall extends ethereum.Call {
  get inputs(): PrepareTaxAmountsCall__Inputs {
    return new PrepareTaxAmountsCall__Inputs(this);
  }

  get outputs(): PrepareTaxAmountsCall__Outputs {
    return new PrepareTaxAmountsCall__Outputs(this);
  }
}

export class PrepareTaxAmountsCall__Inputs {
  _call: PrepareTaxAmountsCall;

  constructor(call: PrepareTaxAmountsCall) {
    this._call = call;
  }

  get taxAmountsInput(): PrepareTaxAmountsCallTaxAmountsInputStruct {
    return this._call.inputValues[0].value.toTuple() as PrepareTaxAmountsCallTaxAmountsInputStruct;
  }
}

export class PrepareTaxAmountsCall__Outputs {
  _call: PrepareTaxAmountsCall;

  constructor(call: PrepareTaxAmountsCall) {
    this._call = call;
  }

  get taxAmountsOutput(): PrepareTaxAmountsCallTaxAmountsOutputStruct {
    return this._call.outputValues[0].value.toTuple() as PrepareTaxAmountsCallTaxAmountsOutputStruct;
  }
}

export class PrepareTaxAmountsCallTaxAmountsInputStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get transferAmount(): BigInt {
    return this[2].toBigInt();
  }

  get senderBalance(): BigInt {
    return this[3].toBigInt();
  }

  get recipientBalance(): BigInt {
    return this[4].toBigInt();
  }
}

export class PrepareTaxAmountsCallTaxAmountsOutputStruct extends ethereum.Tuple {
  get senderBalance(): BigInt {
    return this[0].toBigInt();
  }

  get recipientBalance(): BigInt {
    return this[1].toBigInt();
  }

  get burnAndRewardAmount(): BigInt {
    return this[2].toBigInt();
  }

  get recipientGetsAmount(): BigInt {
    return this[3].toBigInt();
  }
}

export class RegisterReferralCall extends ethereum.Call {
  get inputs(): RegisterReferralCall__Inputs {
    return new RegisterReferralCall__Inputs(this);
  }

  get outputs(): RegisterReferralCall__Outputs {
    return new RegisterReferralCall__Outputs(this);
  }
}

export class RegisterReferralCall__Inputs {
  _call: RegisterReferralCall;

  constructor(call: RegisterReferralCall) {
    this._call = call;
  }

  get referral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get referrer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterReferralCall__Outputs {
  _call: RegisterReferralCall;

  constructor(call: RegisterReferralCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class UpdateCustomTaxForAddressCall extends ethereum.Call {
  get inputs(): UpdateCustomTaxForAddressCall__Inputs {
    return new UpdateCustomTaxForAddressCall__Inputs(this);
  }

  get outputs(): UpdateCustomTaxForAddressCall__Outputs {
    return new UpdateCustomTaxForAddressCall__Outputs(this);
  }
}

export class UpdateCustomTaxForAddressCall__Inputs {
  _call: UpdateCustomTaxForAddressCall;

  constructor(call: UpdateCustomTaxForAddressCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newCustomTaxPercent(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateCustomTaxForAddressCall__Outputs {
  _call: UpdateCustomTaxForAddressCall;

  constructor(call: UpdateCustomTaxForAddressCall) {
    this._call = call;
  }
}

export class UpdateHowManyBlocksAgoCall extends ethereum.Call {
  get inputs(): UpdateHowManyBlocksAgoCall__Inputs {
    return new UpdateHowManyBlocksAgoCall__Inputs(this);
  }

  get outputs(): UpdateHowManyBlocksAgoCall__Outputs {
    return new UpdateHowManyBlocksAgoCall__Outputs(this);
  }
}

export class UpdateHowManyBlocksAgoCall__Inputs {
  _call: UpdateHowManyBlocksAgoCall;

  constructor(call: UpdateHowManyBlocksAgoCall) {
    this._call = call;
  }

  get _howManyBlocksAgoReceived(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _howManyBlocksAgoSent(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateHowManyBlocksAgoCall__Outputs {
  _call: UpdateHowManyBlocksAgoCall;

  constructor(call: UpdateHowManyBlocksAgoCall) {
    this._call = call;
  }
}

export class UpdateReCachePeriodCall extends ethereum.Call {
  get inputs(): UpdateReCachePeriodCall__Inputs {
    return new UpdateReCachePeriodCall__Inputs(this);
  }

  get outputs(): UpdateReCachePeriodCall__Outputs {
    return new UpdateReCachePeriodCall__Outputs(this);
  }
}

export class UpdateReCachePeriodCall__Inputs {
  _call: UpdateReCachePeriodCall;

  constructor(call: UpdateReCachePeriodCall) {
    this._call = call;
  }

  get _secondsBetweenUpdates(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateReCachePeriodCall__Outputs {
  _call: UpdateReCachePeriodCall;

  constructor(call: UpdateReCachePeriodCall) {
    this._call = call;
  }
}

export class UpdateReferrersRewardsCall extends ethereum.Call {
  get inputs(): UpdateReferrersRewardsCall__Inputs {
    return new UpdateReferrersRewardsCall__Inputs(this);
  }

  get outputs(): UpdateReferrersRewardsCall__Outputs {
    return new UpdateReferrersRewardsCall__Outputs(this);
  }
}

export class UpdateReferrersRewardsCall__Inputs {
  _call: UpdateReferrersRewardsCall;

  constructor(call: UpdateReferrersRewardsCall) {
    this._call = call;
  }

  get referrals(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class UpdateReferrersRewardsCall__Outputs {
  _call: UpdateReferrersRewardsCall;

  constructor(call: UpdateReferrersRewardsCall) {
    this._call = call;
  }
}

export class UpdateTaxPercentCall extends ethereum.Call {
  get inputs(): UpdateTaxPercentCall__Inputs {
    return new UpdateTaxPercentCall__Inputs(this);
  }

  get outputs(): UpdateTaxPercentCall__Outputs {
    return new UpdateTaxPercentCall__Outputs(this);
  }
}

export class UpdateTaxPercentCall__Inputs {
  _call: UpdateTaxPercentCall;

  constructor(call: UpdateTaxPercentCall) {
    this._call = call;
  }

  get _refTaxPercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _botTaxPercent(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _humanTaxPercent(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _firstLevelRefPercent(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _secondLevelRefPercent(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateTaxPercentCall__Outputs {
  _call: UpdateTaxPercentCall;

  constructor(call: UpdateTaxPercentCall) {
    this._call = call;
  }
}
