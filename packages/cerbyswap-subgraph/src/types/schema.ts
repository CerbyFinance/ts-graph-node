// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Global extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalPools", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransactions", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolumeUSD", Value.fromBigInt(BigInt.zero()));
    this.set("totalLiquidityUSD", Value.fromBigInt(BigInt.zero()));
    this.set("Fees", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("latestHourlies", Value.fromString(""));
    this.set("latestDailies", Value.fromString(""));
    this.set("latestMonthlies", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Global entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Global entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Global", id.toString(), this);
    }
  }

  static load(id: string): Global | null {
    return changetype<Global | null>(store.get("Global", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalPools(): BigInt {
    let value = this.get("totalPools");
    return value!.toBigInt();
  }

  set totalPools(value: BigInt) {
    this.set("totalPools", Value.fromBigInt(value));
  }

  get totalTransactions(): BigInt {
    let value = this.get("totalTransactions");
    return value!.toBigInt();
  }

  set totalTransactions(value: BigInt) {
    this.set("totalTransactions", Value.fromBigInt(value));
  }

  get totalVolumeUSD(): BigInt {
    let value = this.get("totalVolumeUSD");
    return value!.toBigInt();
  }

  set totalVolumeUSD(value: BigInt) {
    this.set("totalVolumeUSD", Value.fromBigInt(value));
  }

  get totalLiquidityUSD(): BigInt {
    let value = this.get("totalLiquidityUSD");
    return value!.toBigInt();
  }

  set totalLiquidityUSD(value: BigInt) {
    this.set("totalLiquidityUSD", Value.fromBigInt(value));
  }

  get Fees(): BigDecimal {
    let value = this.get("Fees");
    return value!.toBigDecimal();
  }

  set Fees(value: BigDecimal) {
    this.set("Fees", Value.fromBigDecimal(value));
  }

  get latestHourlies(): string {
    let value = this.get("latestHourlies");
    return value!.toString();
  }

  set latestHourlies(value: string) {
    this.set("latestHourlies", Value.fromString(value));
  }

  get latestDailies(): string {
    let value = this.get("latestDailies");
    return value!.toString();
  }

  set latestDailies(value: string) {
    this.set("latestDailies", Value.fromString(value));
  }

  get latestMonthlies(): string {
    let value = this.get("latestMonthlies");
    return value!.toString();
  }

  set latestMonthlies(value: string) {
    this.set("latestMonthlies", Value.fromString(value));
  }
}

export class GlobalHourly extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("startUnix", Value.fromI32(0));
    this.set("totalPools", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransactions", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolumeUSD", Value.fromBigInt(BigInt.zero()));
    this.set("totalLiquidityUSD", Value.fromBigInt(BigInt.zero()));
    this.set("Fees", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("previous", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalHourly entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GlobalHourly entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GlobalHourly", id.toString(), this);
    }
  }

  static load(id: string): GlobalHourly | null {
    return changetype<GlobalHourly | null>(store.get("GlobalHourly", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startUnix(): i32 {
    let value = this.get("startUnix");
    return value!.toI32();
  }

  set startUnix(value: i32) {
    this.set("startUnix", Value.fromI32(value));
  }

  get totalPools(): BigInt {
    let value = this.get("totalPools");
    return value!.toBigInt();
  }

  set totalPools(value: BigInt) {
    this.set("totalPools", Value.fromBigInt(value));
  }

  get totalTransactions(): BigInt {
    let value = this.get("totalTransactions");
    return value!.toBigInt();
  }

  set totalTransactions(value: BigInt) {
    this.set("totalTransactions", Value.fromBigInt(value));
  }

  get totalVolumeUSD(): BigInt {
    let value = this.get("totalVolumeUSD");
    return value!.toBigInt();
  }

  set totalVolumeUSD(value: BigInt) {
    this.set("totalVolumeUSD", Value.fromBigInt(value));
  }

  get totalLiquidityUSD(): BigInt {
    let value = this.get("totalLiquidityUSD");
    return value!.toBigInt();
  }

  set totalLiquidityUSD(value: BigInt) {
    this.set("totalLiquidityUSD", Value.fromBigInt(value));
  }

  get Fees(): BigDecimal {
    let value = this.get("Fees");
    return value!.toBigDecimal();
  }

  set Fees(value: BigDecimal) {
    this.set("Fees", Value.fromBigDecimal(value));
  }

  get previous(): string {
    let value = this.get("previous");
    return value!.toString();
  }

  set previous(value: string) {
    this.set("previous", Value.fromString(value));
  }
}

export class GlobalDaily extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("startUnix", Value.fromI32(0));
    this.set("totalPools", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransactions", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolumeUSD", Value.fromBigInt(BigInt.zero()));
    this.set("totalLiquidityUSD", Value.fromBigInt(BigInt.zero()));
    this.set("Fees", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("previous", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalDaily entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GlobalDaily entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GlobalDaily", id.toString(), this);
    }
  }

  static load(id: string): GlobalDaily | null {
    return changetype<GlobalDaily | null>(store.get("GlobalDaily", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startUnix(): i32 {
    let value = this.get("startUnix");
    return value!.toI32();
  }

  set startUnix(value: i32) {
    this.set("startUnix", Value.fromI32(value));
  }

  get totalPools(): BigInt {
    let value = this.get("totalPools");
    return value!.toBigInt();
  }

  set totalPools(value: BigInt) {
    this.set("totalPools", Value.fromBigInt(value));
  }

  get totalTransactions(): BigInt {
    let value = this.get("totalTransactions");
    return value!.toBigInt();
  }

  set totalTransactions(value: BigInt) {
    this.set("totalTransactions", Value.fromBigInt(value));
  }

  get totalVolumeUSD(): BigInt {
    let value = this.get("totalVolumeUSD");
    return value!.toBigInt();
  }

  set totalVolumeUSD(value: BigInt) {
    this.set("totalVolumeUSD", Value.fromBigInt(value));
  }

  get totalLiquidityUSD(): BigInt {
    let value = this.get("totalLiquidityUSD");
    return value!.toBigInt();
  }

  set totalLiquidityUSD(value: BigInt) {
    this.set("totalLiquidityUSD", Value.fromBigInt(value));
  }

  get Fees(): BigDecimal {
    let value = this.get("Fees");
    return value!.toBigDecimal();
  }

  set Fees(value: BigDecimal) {
    this.set("Fees", Value.fromBigDecimal(value));
  }

  get previous(): string {
    let value = this.get("previous");
    return value!.toString();
  }

  set previous(value: string) {
    this.set("previous", Value.fromString(value));
  }
}

export class GlobalMonthly extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("startUnix", Value.fromI32(0));
    this.set("totalPools", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransactions", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolumeUSD", Value.fromBigInt(BigInt.zero()));
    this.set("totalLiquidityUSD", Value.fromBigInt(BigInt.zero()));
    this.set("Fees", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("previous", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalMonthly entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GlobalMonthly entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GlobalMonthly", id.toString(), this);
    }
  }

  static load(id: string): GlobalMonthly | null {
    return changetype<GlobalMonthly | null>(store.get("GlobalMonthly", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startUnix(): i32 {
    let value = this.get("startUnix");
    return value!.toI32();
  }

  set startUnix(value: i32) {
    this.set("startUnix", Value.fromI32(value));
  }

  get totalPools(): BigInt {
    let value = this.get("totalPools");
    return value!.toBigInt();
  }

  set totalPools(value: BigInt) {
    this.set("totalPools", Value.fromBigInt(value));
  }

  get totalTransactions(): BigInt {
    let value = this.get("totalTransactions");
    return value!.toBigInt();
  }

  set totalTransactions(value: BigInt) {
    this.set("totalTransactions", Value.fromBigInt(value));
  }

  get totalVolumeUSD(): BigInt {
    let value = this.get("totalVolumeUSD");
    return value!.toBigInt();
  }

  set totalVolumeUSD(value: BigInt) {
    this.set("totalVolumeUSD", Value.fromBigInt(value));
  }

  get totalLiquidityUSD(): BigInt {
    let value = this.get("totalLiquidityUSD");
    return value!.toBigInt();
  }

  set totalLiquidityUSD(value: BigInt) {
    this.set("totalLiquidityUSD", Value.fromBigInt(value));
  }

  get Fees(): BigDecimal {
    let value = this.get("Fees");
    return value!.toBigDecimal();
  }

  set Fees(value: BigDecimal) {
    this.set("Fees", Value.fromBigDecimal(value));
  }

  get previous(): string {
    let value = this.get("previous");
    return value!.toString();
  }

  set previous(value: string) {
    this.set("previous", Value.fromString(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("feedType", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountTokensIn", Value.fromBigInt(BigInt.zero()));
    this.set("amountTokensOut", Value.fromBigInt(BigInt.zero()));
    this.set("amountFeesCollected", Value.fromBigInt(BigInt.zero()));
    this.set("currentFee", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("logIndex", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Swap entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feedType(): string {
    let value = this.get("feedType");
    return value!.toString();
  }

  set feedType(value: string) {
    this.set("feedType", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get amountTokensIn(): BigInt {
    let value = this.get("amountTokensIn");
    return value!.toBigInt();
  }

  set amountTokensIn(value: BigInt) {
    this.set("amountTokensIn", Value.fromBigInt(value));
  }

  get amountTokensOut(): BigInt {
    let value = this.get("amountTokensOut");
    return value!.toBigInt();
  }

  set amountTokensOut(value: BigInt) {
    this.set("amountTokensOut", Value.fromBigInt(value));
  }

  get amountFeesCollected(): BigInt {
    let value = this.get("amountFeesCollected");
    return value!.toBigInt();
  }

  set amountFeesCollected(value: BigInt) {
    this.set("amountFeesCollected", Value.fromBigInt(value));
  }

  get currentFee(): BigDecimal {
    let value = this.get("currentFee");
    return value!.toBigDecimal();
  }

  set currentFee(value: BigDecimal) {
    this.set("currentFee", Value.fromBigDecimal(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class liqudityEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("feedType", Value.fromString(""));
    this.set("amountTokens", Value.fromBigInt(BigInt.zero()));
    this.set("amountCerUsd", Value.fromBigInt(BigInt.zero()));
    this.set("amountLpTokensBalanceToBurn", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("logIndex", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save liqudityEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save liqudityEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("liqudityEvent", id.toString(), this);
    }
  }

  static load(id: string): liqudityEvent | null {
    return changetype<liqudityEvent | null>(store.get("liqudityEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get feedType(): string {
    let value = this.get("feedType");
    return value!.toString();
  }

  set feedType(value: string) {
    this.set("feedType", Value.fromString(value));
  }

  get amountTokens(): BigInt {
    let value = this.get("amountTokens");
    return value!.toBigInt();
  }

  set amountTokens(value: BigInt) {
    this.set("amountTokens", Value.fromBigInt(value));
  }

  get amountCerUsd(): BigInt {
    let value = this.get("amountCerUsd");
    return value!.toBigInt();
  }

  set amountCerUsd(value: BigInt) {
    this.set("amountCerUsd", Value.fromBigInt(value));
  }

  get amountLpTokensBalanceToBurn(): BigInt {
    let value = this.get("amountLpTokensBalanceToBurn");
    return value!.toBigInt();
  }

  set amountLpTokensBalanceToBurn(value: BigInt) {
    this.set("amountLpTokensBalanceToBurn", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class poolTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save poolTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save poolTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("poolTransaction", id.toString(), this);
    }
  }

  static load(id: string): poolTransaction | null {
    return changetype<poolTransaction | null>(store.get("poolTransaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): Array<string> | null {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pool(value: Array<string> | null) {
    if (!value) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromStringArray(<Array<string>>value));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (!value) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(<Array<string>>value));
    }
  }

  get liqudity(): Array<string> | null {
    let value = this.get("liqudity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liqudity(value: Array<string> | null) {
    if (!value) {
      this.unset("liqudity");
    } else {
      this.set("liqudity", Value.fromStringArray(<Array<string>>value));
    }
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolId", Value.fromBigInt(BigInt.zero()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("vaultAddress", Value.fromBytes(Bytes.empty()));
    this.set("balanceToken", Value.fromBigInt(BigInt.zero()));
    this.set("balanceCerUsd", Value.fromBigInt(BigInt.zero()));
    this.set("CreditCerUsd", Value.fromBigInt(BigInt.zero()));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("decimals", Value.fromI32(0));
    this.set("latestDailies", Value.fromString(""));
    this.set("latestHourlies", Value.fromString(""));
    this.set("latestMonthlies", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): BigInt {
    let value = this.get("poolId");
    return value!.toBigInt();
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get vaultAddress(): Bytes {
    let value = this.get("vaultAddress");
    return value!.toBytes();
  }

  set vaultAddress(value: Bytes) {
    this.set("vaultAddress", Value.fromBytes(value));
  }

  get balanceToken(): BigInt {
    let value = this.get("balanceToken");
    return value!.toBigInt();
  }

  set balanceToken(value: BigInt) {
    this.set("balanceToken", Value.fromBigInt(value));
  }

  get balanceCerUsd(): BigInt {
    let value = this.get("balanceCerUsd");
    return value!.toBigInt();
  }

  set balanceCerUsd(value: BigInt) {
    this.set("balanceCerUsd", Value.fromBigInt(value));
  }

  get CreditCerUsd(): BigInt {
    let value = this.get("CreditCerUsd");
    return value!.toBigInt();
  }

  set CreditCerUsd(value: BigInt) {
    this.set("CreditCerUsd", Value.fromBigInt(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get latestDailies(): string {
    let value = this.get("latestDailies");
    return value!.toString();
  }

  set latestDailies(value: string) {
    this.set("latestDailies", Value.fromString(value));
  }

  get latestHourlies(): string {
    let value = this.get("latestHourlies");
    return value!.toString();
  }

  set latestHourlies(value: string) {
    this.set("latestHourlies", Value.fromString(value));
  }

  get latestMonthlies(): string {
    let value = this.get("latestMonthlies");
    return value!.toString();
  }

  set latestMonthlies(value: string) {
    this.set("latestMonthlies", Value.fromString(value));
  }

  get poolTransactions(): Array<string> | null {
    let value = this.get("poolTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set poolTransactions(value: Array<string> | null) {
    if (!value) {
      this.unset("poolTransactions");
    } else {
      this.set("poolTransactions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class poolHourly extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("startUnix", Value.fromI32(0));
    this.set("token", Value.fromString(""));
    this.set("volumeToken", Value.fromBigInt(BigInt.zero()));
    this.set("volumeUSD", Value.fromBigInt(BigInt.zero()));
    this.set("balanceToken", Value.fromBigInt(BigInt.zero()));
    this.set("balanceCerUsd", Value.fromBigInt(BigInt.zero()));
    this.set("CreditCerUsd", Value.fromBigInt(BigInt.zero()));
    this.set("amountFeesCollected", Value.fromBigInt(BigInt.zero()));
    this.set("APR", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("priceChangePercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("previous", Value.fromString(""));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("open", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("high", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("low", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("close", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save poolHourly entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save poolHourly entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("poolHourly", id.toString(), this);
    }
  }

  static load(id: string): poolHourly | null {
    return changetype<poolHourly | null>(store.get("poolHourly", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startUnix(): i32 {
    let value = this.get("startUnix");
    return value!.toI32();
  }

  set startUnix(value: i32) {
    this.set("startUnix", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get volumeToken(): BigInt {
    let value = this.get("volumeToken");
    return value!.toBigInt();
  }

  set volumeToken(value: BigInt) {
    this.set("volumeToken", Value.fromBigInt(value));
  }

  get volumeUSD(): BigInt {
    let value = this.get("volumeUSD");
    return value!.toBigInt();
  }

  set volumeUSD(value: BigInt) {
    this.set("volumeUSD", Value.fromBigInt(value));
  }

  get balanceToken(): BigInt {
    let value = this.get("balanceToken");
    return value!.toBigInt();
  }

  set balanceToken(value: BigInt) {
    this.set("balanceToken", Value.fromBigInt(value));
  }

  get balanceCerUsd(): BigInt {
    let value = this.get("balanceCerUsd");
    return value!.toBigInt();
  }

  set balanceCerUsd(value: BigInt) {
    this.set("balanceCerUsd", Value.fromBigInt(value));
  }

  get CreditCerUsd(): BigInt {
    let value = this.get("CreditCerUsd");
    return value!.toBigInt();
  }

  set CreditCerUsd(value: BigInt) {
    this.set("CreditCerUsd", Value.fromBigInt(value));
  }

  get amountFeesCollected(): BigInt {
    let value = this.get("amountFeesCollected");
    return value!.toBigInt();
  }

  set amountFeesCollected(value: BigInt) {
    this.set("amountFeesCollected", Value.fromBigInt(value));
  }

  get APR(): BigDecimal {
    let value = this.get("APR");
    return value!.toBigDecimal();
  }

  set APR(value: BigDecimal) {
    this.set("APR", Value.fromBigDecimal(value));
  }

  get priceChangePercent(): BigDecimal {
    let value = this.get("priceChangePercent");
    return value!.toBigDecimal();
  }

  set priceChangePercent(value: BigDecimal) {
    this.set("priceChangePercent", Value.fromBigDecimal(value));
  }

  get previous(): string {
    let value = this.get("previous");
    return value!.toString();
  }

  set previous(value: string) {
    this.set("previous", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class poolDaily extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("startUnix", Value.fromI32(0));
    this.set("token", Value.fromString(""));
    this.set("volumeToken", Value.fromBigInt(BigInt.zero()));
    this.set("volumeUSD", Value.fromBigInt(BigInt.zero()));
    this.set("balanceToken", Value.fromBigInt(BigInt.zero()));
    this.set("balanceCerUsd", Value.fromBigInt(BigInt.zero()));
    this.set("CreditCerUsd", Value.fromBigInt(BigInt.zero()));
    this.set("amountFeesCollected", Value.fromBigInt(BigInt.zero()));
    this.set("APR", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("priceChangePercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("previous", Value.fromString(""));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("open", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("high", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("low", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("close", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save poolDaily entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save poolDaily entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("poolDaily", id.toString(), this);
    }
  }

  static load(id: string): poolDaily | null {
    return changetype<poolDaily | null>(store.get("poolDaily", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startUnix(): i32 {
    let value = this.get("startUnix");
    return value!.toI32();
  }

  set startUnix(value: i32) {
    this.set("startUnix", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get volumeToken(): BigInt {
    let value = this.get("volumeToken");
    return value!.toBigInt();
  }

  set volumeToken(value: BigInt) {
    this.set("volumeToken", Value.fromBigInt(value));
  }

  get volumeUSD(): BigInt {
    let value = this.get("volumeUSD");
    return value!.toBigInt();
  }

  set volumeUSD(value: BigInt) {
    this.set("volumeUSD", Value.fromBigInt(value));
  }

  get balanceToken(): BigInt {
    let value = this.get("balanceToken");
    return value!.toBigInt();
  }

  set balanceToken(value: BigInt) {
    this.set("balanceToken", Value.fromBigInt(value));
  }

  get balanceCerUsd(): BigInt {
    let value = this.get("balanceCerUsd");
    return value!.toBigInt();
  }

  set balanceCerUsd(value: BigInt) {
    this.set("balanceCerUsd", Value.fromBigInt(value));
  }

  get CreditCerUsd(): BigInt {
    let value = this.get("CreditCerUsd");
    return value!.toBigInt();
  }

  set CreditCerUsd(value: BigInt) {
    this.set("CreditCerUsd", Value.fromBigInt(value));
  }

  get amountFeesCollected(): BigInt {
    let value = this.get("amountFeesCollected");
    return value!.toBigInt();
  }

  set amountFeesCollected(value: BigInt) {
    this.set("amountFeesCollected", Value.fromBigInt(value));
  }

  get APR(): BigDecimal {
    let value = this.get("APR");
    return value!.toBigDecimal();
  }

  set APR(value: BigDecimal) {
    this.set("APR", Value.fromBigDecimal(value));
  }

  get priceChangePercent(): BigDecimal {
    let value = this.get("priceChangePercent");
    return value!.toBigDecimal();
  }

  set priceChangePercent(value: BigDecimal) {
    this.set("priceChangePercent", Value.fromBigDecimal(value));
  }

  get previous(): string {
    let value = this.get("previous");
    return value!.toString();
  }

  set previous(value: string) {
    this.set("previous", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class poolMonthly extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("startUnix", Value.fromI32(0));
    this.set("token", Value.fromString(""));
    this.set("volumeToken", Value.fromBigInt(BigInt.zero()));
    this.set("volumeUSD", Value.fromBigInt(BigInt.zero()));
    this.set("balanceToken", Value.fromBigInt(BigInt.zero()));
    this.set("balanceCerUsd", Value.fromBigInt(BigInt.zero()));
    this.set("CreditCerUsd", Value.fromBigInt(BigInt.zero()));
    this.set("amountFeesCollected", Value.fromBigInt(BigInt.zero()));
    this.set("APR", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("priceChangePercent", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("previous", Value.fromString(""));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("open", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("high", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("low", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("close", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save poolMonthly entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save poolMonthly entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("poolMonthly", id.toString(), this);
    }
  }

  static load(id: string): poolMonthly | null {
    return changetype<poolMonthly | null>(store.get("poolMonthly", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startUnix(): i32 {
    let value = this.get("startUnix");
    return value!.toI32();
  }

  set startUnix(value: i32) {
    this.set("startUnix", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get volumeToken(): BigInt {
    let value = this.get("volumeToken");
    return value!.toBigInt();
  }

  set volumeToken(value: BigInt) {
    this.set("volumeToken", Value.fromBigInt(value));
  }

  get volumeUSD(): BigInt {
    let value = this.get("volumeUSD");
    return value!.toBigInt();
  }

  set volumeUSD(value: BigInt) {
    this.set("volumeUSD", Value.fromBigInt(value));
  }

  get balanceToken(): BigInt {
    let value = this.get("balanceToken");
    return value!.toBigInt();
  }

  set balanceToken(value: BigInt) {
    this.set("balanceToken", Value.fromBigInt(value));
  }

  get balanceCerUsd(): BigInt {
    let value = this.get("balanceCerUsd");
    return value!.toBigInt();
  }

  set balanceCerUsd(value: BigInt) {
    this.set("balanceCerUsd", Value.fromBigInt(value));
  }

  get CreditCerUsd(): BigInt {
    let value = this.get("CreditCerUsd");
    return value!.toBigInt();
  }

  set CreditCerUsd(value: BigInt) {
    this.set("CreditCerUsd", Value.fromBigInt(value));
  }

  get amountFeesCollected(): BigInt {
    let value = this.get("amountFeesCollected");
    return value!.toBigInt();
  }

  set amountFeesCollected(value: BigInt) {
    this.set("amountFeesCollected", Value.fromBigInt(value));
  }

  get APR(): BigDecimal {
    let value = this.get("APR");
    return value!.toBigDecimal();
  }

  set APR(value: BigDecimal) {
    this.set("APR", Value.fromBigDecimal(value));
  }

  get priceChangePercent(): BigDecimal {
    let value = this.get("priceChangePercent");
    return value!.toBigDecimal();
  }

  set priceChangePercent(value: BigDecimal) {
    this.set("priceChangePercent", Value.fromBigDecimal(value));
  }

  get previous(): string {
    let value = this.get("previous");
    return value!.toString();
  }

  set previous(value: string) {
    this.set("previous", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class Block extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("number", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Block entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Block entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Block", id.toString(), this);
    }
  }

  static load(id: string): Block | null {
    return changetype<Block | null>(store.get("Block", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value!.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get parentHash(): string | null {
    let value = this.get("parentHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parentHash(value: string | null) {
    if (!value) {
      this.unset("parentHash");
    } else {
      this.set("parentHash", Value.fromString(<string>value));
    }
  }

  get author(): string | null {
    let value = this.get("author");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set author(value: string | null) {
    if (!value) {
      this.unset("author");
    } else {
      this.set("author", Value.fromString(<string>value));
    }
  }

  get difficulty(): BigInt | null {
    let value = this.get("difficulty");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set difficulty(value: BigInt | null) {
    if (!value) {
      this.unset("difficulty");
    } else {
      this.set("difficulty", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalDifficulty(): BigInt | null {
    let value = this.get("totalDifficulty");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalDifficulty(value: BigInt | null) {
    if (!value) {
      this.unset("totalDifficulty");
    } else {
      this.set("totalDifficulty", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get receiptsRoot(): string | null {
    let value = this.get("receiptsRoot");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receiptsRoot(value: string | null) {
    if (!value) {
      this.unset("receiptsRoot");
    } else {
      this.set("receiptsRoot", Value.fromString(<string>value));
    }
  }

  get transactionsRoot(): string | null {
    let value = this.get("transactionsRoot");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transactionsRoot(value: string | null) {
    if (!value) {
      this.unset("transactionsRoot");
    } else {
      this.set("transactionsRoot", Value.fromString(<string>value));
    }
  }

  get stateRoot(): string | null {
    let value = this.get("stateRoot");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stateRoot(value: string | null) {
    if (!value) {
      this.unset("stateRoot");
    } else {
      this.set("stateRoot", Value.fromString(<string>value));
    }
  }

  get size(): BigInt | null {
    let value = this.get("size");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set size(value: BigInt | null) {
    if (!value) {
      this.unset("size");
    } else {
      this.set("size", Value.fromBigInt(<BigInt>value));
    }
  }

  get unclesHash(): string | null {
    let value = this.get("unclesHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set unclesHash(value: string | null) {
    if (!value) {
      this.unset("unclesHash");
    } else {
      this.set("unclesHash", Value.fromString(<string>value));
    }
  }
}
