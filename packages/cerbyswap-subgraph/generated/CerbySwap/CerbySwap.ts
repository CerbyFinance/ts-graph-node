// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amountTokensIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amountCerUsdToMint(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _lpAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amountTokensOut(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amountCerUsdToBurn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _amountLpTokensBalanceToBurn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _vaultAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _poolId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amountTokensIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _amountCerUsdIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _amountTokensOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _amountCerUsdOut(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _currentFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get _transferTo(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class Sync extends ethereum.Event {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newBalanceToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _newBalanceCerUsd(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _newCreditCerUsd(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get _operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get _values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get _operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CerbySwap__getPoolsBalancesByTokensResultValue0Struct extends ethereum.Tuple {
  get balanceToken(): BigInt {
    return this[0].toBigInt();
  }

  get balanceCerUsd(): BigInt {
    return this[1].toBigInt();
  }
}

export class CerbySwap__getPoolsByTokensResultValue0Struct extends ethereum.Tuple {
  get tradeVolumePerPeriodInCerUsd(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lastCachedOneMinusFee(): i32 {
    return this[1].toI32();
  }

  get lastCachedTradePeriod(): i32 {
    return this[2].toI32();
  }

  get lastSqrtKValue(): BigInt {
    return this[3].toBigInt();
  }

  get creditCerUsd(): BigInt {
    return this[4].toBigInt();
  }
}

export class CerbySwap__getSettingsResultValue0Struct extends ethereum.Tuple {
  get mintFeeBeneficiary(): Address {
    return this[0].toAddress();
  }

  get mintFeeMultiplier(): BigInt {
    return this[1].toBigInt();
  }

  get feeMinimum(): i32 {
    return this[2].toI32();
  }

  get feeMaximum(): i32 {
    return this[3].toI32();
  }

  get tvlMultiplierMinimum(): BigInt {
    return this[4].toBigInt();
  }

  get tvlMultiplierMaximum(): BigInt {
    return this[5].toBigInt();
  }
}

export class CerbySwap extends ethereum.SmartContract {
  static bind(address: Address): CerbySwap {
    return new CerbySwap("CerbySwap", address);
  }

  balanceOf(_account: Address, _id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(_account: Address, _id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(
    _accounts: Array<Address>,
    _ids: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(_accounts),
        ethereum.Value.fromUnsignedBigIntArray(_ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    _accounts: Array<Address>,
    _ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(_accounts),
        ethereum.Value.fromUnsignedBigIntArray(_ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  decimals(): BigInt {
    let result = super.call("decimals", "decimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimals", "decimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exists(_id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(_id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  generateVaultAddressByToken(_token: Address): Address {
    let result = super.call(
      "generateVaultAddressByToken",
      "generateVaultAddressByToken(address):(address)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toAddress();
  }

  try_generateVaultAddressByToken(
    _token: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "generateVaultAddressByToken",
      "generateVaultAddressByToken(address):(address)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentOneMinusFeeBasedOnTrades(_token: Address): BigInt {
    let result = super.call(
      "getCurrentOneMinusFeeBasedOnTrades",
      "getCurrentOneMinusFeeBasedOnTrades(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentOneMinusFeeBasedOnTrades(
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentOneMinusFeeBasedOnTrades",
      "getCurrentOneMinusFeeBasedOnTrades(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInputTokensForExactTokens(
    _tokenIn: Address,
    _tokenOut: Address,
    _amountTokensOut: BigInt
  ): BigInt {
    let result = super.call(
      "getInputTokensForExactTokens",
      "getInputTokensForExactTokens(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_amountTokensOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getInputTokensForExactTokens(
    _tokenIn: Address,
    _tokenOut: Address,
    _amountTokensOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInputTokensForExactTokens",
      "getInputTokensForExactTokens(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_amountTokensOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOutputExactTokensForTokens(
    _tokenIn: Address,
    _tokenOut: Address,
    _amountTokensIn: BigInt
  ): BigInt {
    let result = super.call(
      "getOutputExactTokensForTokens",
      "getOutputExactTokensForTokens(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_amountTokensIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_getOutputExactTokensForTokens(
    _tokenIn: Address,
    _tokenOut: Address,
    _amountTokensIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOutputExactTokensForTokens",
      "getOutputExactTokensForTokens(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_amountTokensIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolsBalancesByTokens(
    _tokens: Array<Address>
  ): Array<CerbySwap__getPoolsBalancesByTokensResultValue0Struct> {
    let result = super.call(
      "getPoolsBalancesByTokens",
      "getPoolsBalancesByTokens(address[]):((uint256,uint256)[])",
      [ethereum.Value.fromAddressArray(_tokens)]
    );

    return result[0].toTupleArray<
      CerbySwap__getPoolsBalancesByTokensResultValue0Struct
    >();
  }

  try_getPoolsBalancesByTokens(
    _tokens: Array<Address>
  ): ethereum.CallResult<
    Array<CerbySwap__getPoolsBalancesByTokensResultValue0Struct>
  > {
    let result = super.tryCall(
      "getPoolsBalancesByTokens",
      "getPoolsBalancesByTokens(address[]):((uint256,uint256)[])",
      [ethereum.Value.fromAddressArray(_tokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        CerbySwap__getPoolsBalancesByTokensResultValue0Struct
      >()
    );
  }

  getPoolsByTokens(
    _tokens: Array<Address>
  ): Array<CerbySwap__getPoolsByTokensResultValue0Struct> {
    let result = super.call(
      "getPoolsByTokens",
      "getPoolsByTokens(address[]):((uint40[6],uint16,uint8,uint120,uint120)[])",
      [ethereum.Value.fromAddressArray(_tokens)]
    );

    return result[0].toTupleArray<
      CerbySwap__getPoolsByTokensResultValue0Struct
    >();
  }

  try_getPoolsByTokens(
    _tokens: Array<Address>
  ): ethereum.CallResult<Array<CerbySwap__getPoolsByTokensResultValue0Struct>> {
    let result = super.tryCall(
      "getPoolsByTokens",
      "getPoolsByTokens(address[]):((uint40[6],uint16,uint8,uint120,uint120)[])",
      [ethereum.Value.fromAddressArray(_tokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<CerbySwap__getPoolsByTokensResultValue0Struct>()
    );
  }

  getSettings(): CerbySwap__getSettingsResultValue0Struct {
    let result = super.call(
      "getSettings",
      "getSettings():((address,uint32,uint16,uint16,uint64,uint64))",
      []
    );

    return changetype<CerbySwap__getSettingsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getSettings(): ethereum.CallResult<
    CerbySwap__getSettingsResultValue0Struct
  > {
    let result = super.tryCall(
      "getSettings",
      "getSettings():((address,uint32,uint16,uint16,uint64,uint64))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CerbySwap__getSettingsResultValue0Struct>(value[0].toTuple())
    );
  }

  getTokenToPoolId(_token: Address): BigInt {
    let result = super.call(
      "getTokenToPoolId",
      "getTokenToPoolId(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getTokenToPoolId(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenToPoolId",
      "getTokenToPoolId(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUtilsContractAtPos(_pos: BigInt): Address {
    let result = super.call(
      "getUtilsContractAtPos",
      "getUtilsContractAtPos(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_pos)]
    );

    return result[0].toAddress();
  }

  try_getUtilsContractAtPos(_pos: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUtilsContractAtPos",
      "getUtilsContractAtPos(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_pos)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(_account: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _account: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removeTokenLiquidity(
    _token: Address,
    _amountLpTokensBalanceToBurn: BigInt,
    _expireTimestamp: BigInt,
    _transferTo: Address
  ): BigInt {
    let result = super.call(
      "removeTokenLiquidity",
      "removeTokenLiquidity(address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amountLpTokensBalanceToBurn),
        ethereum.Value.fromUnsignedBigInt(_expireTimestamp),
        ethereum.Value.fromAddress(_transferTo)
      ]
    );

    return result[0].toBigInt();
  }

  try_removeTokenLiquidity(
    _token: Address,
    _amountLpTokensBalanceToBurn: BigInt,
    _expireTimestamp: BigInt,
    _transferTo: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeTokenLiquidity",
      "removeTokenLiquidity(address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amountLpTokensBalanceToBurn),
        ethereum.Value.fromUnsignedBigInt(_expireTimestamp),
        ethereum.Value.fromAddress(_transferTo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply1(_id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply1(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(_id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toString();
  }

  try_uri(_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTokenLiquidityCall extends ethereum.Call {
  get inputs(): AddTokenLiquidityCall__Inputs {
    return new AddTokenLiquidityCall__Inputs(this);
  }

  get outputs(): AddTokenLiquidityCall__Outputs {
    return new AddTokenLiquidityCall__Outputs(this);
  }
}

export class AddTokenLiquidityCall__Inputs {
  _call: AddTokenLiquidityCall;

  constructor(call: AddTokenLiquidityCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountTokensIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _expireTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _transferTo(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class AddTokenLiquidityCall__Outputs {
  _call: AddTokenLiquidityCall;

  constructor(call: AddTokenLiquidityCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AdminChangeCerUsdCreditInPoolCall extends ethereum.Call {
  get inputs(): AdminChangeCerUsdCreditInPoolCall__Inputs {
    return new AdminChangeCerUsdCreditInPoolCall__Inputs(this);
  }

  get outputs(): AdminChangeCerUsdCreditInPoolCall__Outputs {
    return new AdminChangeCerUsdCreditInPoolCall__Outputs(this);
  }
}

export class AdminChangeCerUsdCreditInPoolCall__Inputs {
  _call: AdminChangeCerUsdCreditInPoolCall;

  constructor(call: AdminChangeCerUsdCreditInPoolCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountCerUsdCredit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AdminChangeCerUsdCreditInPoolCall__Outputs {
  _call: AdminChangeCerUsdCreditInPoolCall;

  constructor(call: AdminChangeCerUsdCreditInPoolCall) {
    this._call = call;
  }
}

export class AdminCreatePoolCall extends ethereum.Call {
  get inputs(): AdminCreatePoolCall__Inputs {
    return new AdminCreatePoolCall__Inputs(this);
  }

  get outputs(): AdminCreatePoolCall__Outputs {
    return new AdminCreatePoolCall__Outputs(this);
  }
}

export class AdminCreatePoolCall__Inputs {
  _call: AdminCreatePoolCall;

  constructor(call: AdminCreatePoolCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountTokensIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amountCerUsdToMint(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _transferTo(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class AdminCreatePoolCall__Outputs {
  _call: AdminCreatePoolCall;

  constructor(call: AdminCreatePoolCall) {
    this._call = call;
  }
}

export class AdminSetUrlPrefixCall extends ethereum.Call {
  get inputs(): AdminSetUrlPrefixCall__Inputs {
    return new AdminSetUrlPrefixCall__Inputs(this);
  }

  get outputs(): AdminSetUrlPrefixCall__Outputs {
    return new AdminSetUrlPrefixCall__Outputs(this);
  }
}

export class AdminSetUrlPrefixCall__Inputs {
  _call: AdminSetUrlPrefixCall;

  constructor(call: AdminSetUrlPrefixCall) {
    this._call = call;
  }

  get _newUrlPrefix(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AdminSetUrlPrefixCall__Outputs {
  _call: AdminSetUrlPrefixCall;

  constructor(call: AdminSetUrlPrefixCall) {
    this._call = call;
  }
}

export class AdminUpdateNameAndSymbolCall extends ethereum.Call {
  get inputs(): AdminUpdateNameAndSymbolCall__Inputs {
    return new AdminUpdateNameAndSymbolCall__Inputs(this);
  }

  get outputs(): AdminUpdateNameAndSymbolCall__Outputs {
    return new AdminUpdateNameAndSymbolCall__Outputs(this);
  }
}

export class AdminUpdateNameAndSymbolCall__Inputs {
  _call: AdminUpdateNameAndSymbolCall;

  constructor(call: AdminUpdateNameAndSymbolCall) {
    this._call = call;
  }

  get _newContractName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _newContractSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AdminUpdateNameAndSymbolCall__Outputs {
  _call: AdminUpdateNameAndSymbolCall;

  constructor(call: AdminUpdateNameAndSymbolCall) {
    this._call = call;
  }
}

export class AdminUpdateSettingsCall extends ethereum.Call {
  get inputs(): AdminUpdateSettingsCall__Inputs {
    return new AdminUpdateSettingsCall__Inputs(this);
  }

  get outputs(): AdminUpdateSettingsCall__Outputs {
    return new AdminUpdateSettingsCall__Outputs(this);
  }
}

export class AdminUpdateSettingsCall__Inputs {
  _call: AdminUpdateSettingsCall;

  constructor(call: AdminUpdateSettingsCall) {
    this._call = call;
  }

  get _settings(): AdminUpdateSettingsCall_settingsStruct {
    return changetype<AdminUpdateSettingsCall_settingsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AdminUpdateSettingsCall__Outputs {
  _call: AdminUpdateSettingsCall;

  constructor(call: AdminUpdateSettingsCall) {
    this._call = call;
  }
}

export class AdminUpdateSettingsCall_settingsStruct extends ethereum.Tuple {
  get mintFeeBeneficiary(): Address {
    return this[0].toAddress();
  }

  get mintFeeMultiplier(): BigInt {
    return this[1].toBigInt();
  }

  get feeMinimum(): i32 {
    return this[2].toI32();
  }

  get feeMaximum(): i32 {
    return this[3].toI32();
  }

  get tvlMultiplierMinimum(): BigInt {
    return this[4].toBigInt();
  }

  get tvlMultiplierMaximum(): BigInt {
    return this[5].toBigInt();
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountTokensIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amountCerUsdToMint(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _transferTo(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }
}

export class IncreaseCerUsdCreditInPoolCall extends ethereum.Call {
  get inputs(): IncreaseCerUsdCreditInPoolCall__Inputs {
    return new IncreaseCerUsdCreditInPoolCall__Inputs(this);
  }

  get outputs(): IncreaseCerUsdCreditInPoolCall__Outputs {
    return new IncreaseCerUsdCreditInPoolCall__Outputs(this);
  }
}

export class IncreaseCerUsdCreditInPoolCall__Inputs {
  _call: IncreaseCerUsdCreditInPoolCall;

  constructor(call: IncreaseCerUsdCreditInPoolCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountCerUsdCredit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseCerUsdCreditInPoolCall__Outputs {
  _call: IncreaseCerUsdCreditInPoolCall;

  constructor(call: IncreaseCerUsdCreditInPoolCall) {
    this._call = call;
  }
}

export class RemoveTokenLiquidityCall extends ethereum.Call {
  get inputs(): RemoveTokenLiquidityCall__Inputs {
    return new RemoveTokenLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveTokenLiquidityCall__Outputs {
    return new RemoveTokenLiquidityCall__Outputs(this);
  }
}

export class RemoveTokenLiquidityCall__Inputs {
  _call: RemoveTokenLiquidityCall;

  constructor(call: RemoveTokenLiquidityCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountLpTokensBalanceToBurn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _expireTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _transferTo(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RemoveTokenLiquidityCall__Outputs {
  _call: RemoveTokenLiquidityCall;

  constructor(call: RemoveTokenLiquidityCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SwapExactTokensForTokensCall extends ethereum.Call {
  get inputs(): SwapExactTokensForTokensCall__Inputs {
    return new SwapExactTokensForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForTokensCall__Outputs {
    return new SwapExactTokensForTokensCall__Outputs(this);
  }
}

export class SwapExactTokensForTokensCall__Inputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get _tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountTokensIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minAmountTokensOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _expireTimestamp(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _transferTo(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class SwapExactTokensForTokensCall__Outputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapTokensForExactTokensCall extends ethereum.Call {
  get inputs(): SwapTokensForExactTokensCall__Inputs {
    return new SwapTokensForExactTokensCall__Inputs(this);
  }

  get outputs(): SwapTokensForExactTokensCall__Outputs {
    return new SwapTokensForExactTokensCall__Outputs(this);
  }
}

export class SwapTokensForExactTokensCall__Inputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get _tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountTokensOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxAmountTokensIn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _expireTimestamp(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _transferTo(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class SwapTokensForExactTokensCall__Outputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
